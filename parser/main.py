#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py [OPTIONS]

–û–ø—Ü–∏–∏:
    --resume        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    --full          –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö URL (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
    --collection    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    --stats-only    –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    --health-check  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    --help          –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""

import asyncio
import sys
import signal
from pathlib import Path
import click
from typing import Optional
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from config import config
from logger import logger
from collection_manager import CollectionManager
from stats import StatsManager
from data_manager import DataManager
from cache_manager import CacheManager

class TelegramGiftsParser:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram"""
    
    def __init__(self):
        self.collection_manager = CollectionManager()
        self.stats_manager = StatsManager()
        self.running = True
        self.session_id = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.log_info(f"Received signal {signum}, shutting down gracefully...")
        self.running = False
    
    async def run_health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        logger.log_info("Running health check...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.log_info("‚úì Configuration loaded")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
            if not config.FILE_LIST.exists():
                logger.log_error("‚úó File list not found")
                return False
            logger.log_info("‚úì File list accessible")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            test_collection = "lightsword"
            test_file = config.MATERIALS_DIR / f"{test_collection}.txt"
            if not test_file.exists():
                logger.log_error("‚úó Test collection file not found")
                return False
            logger.log_info("‚úì Collection files accessible")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.collection_manager.initialize()
            async with self.collection_manager.downloader:
                health_ok = await self.collection_manager.downloader.health_check()
                if not health_ok:
                    logger.log_error("‚úó Network health check failed")
                    return False
                logger.log_info("‚úì Network connectivity OK")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
            test_html = """
            <html>
                <head>
                    <meta property="og:title" content="Light Sword #1">
                    <meta property="og:image" content="https://example.com/image.jpg">
                    <meta property="og:description" content="Model: Test\nBackdrop: Test\nSymbol: Test">
                </head>
            </html>
            """
            test_url = "https://t.me/nft/lightsword-1"
            parsed_data = self.collection_manager.gift_parser.parse_gift_data(test_html, test_url)
            if not parsed_data:
                logger.log_error("‚úó Gift parser test failed")
                return False
            logger.log_info("‚úì Gift parser working")
            
            logger.log_info("üéâ All health checks passed!")
            return True
            
        except Exception as e:
            logger.log_error(f"‚úó Health check failed: {e}")
            return False
        finally:
            await self.collection_manager.cleanup()
    
    async def run_stats_generation(self) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        """
        logger.log_info("Generating statistics...")
        
        try:
            data_manager = DataManager()
            cache_manager = CacheManager()
            await cache_manager.load_cache()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            collection_stats = await self.stats_manager.generate_collection_stats(data_manager)
            performance_report = await self.stats_manager.generate_performance_report()
            summary_report = await self.stats_manager.generate_summary_report(data_manager, cache_manager)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
            csv_file = await self.stats_manager.export_stats_csv()
            
            logger.log_info(f"üìä Statistics generated successfully!")
            logger.log_info(f"üìà Collection stats: {len(collection_stats.get('collections', {}))} collections")
            logger.log_info(f"‚ö° Performance report: {len(performance_report.get('sessions_history', []))} sessions")
            logger.log_info(f"üìã Summary report saved")
            logger.log_info(f"üìÑ CSV export: {csv_file}")
            
            return True
            
        except Exception as e:
            logger.log_error(f"Failed to generate statistics: {e}")
            return False
    
    async def run_single_collection(self, collection_name: str, resume_mode: bool = True) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–æ–ª–ª–µ–∫—Ü–∏—é
        
        Args:
            collection_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            resume_mode: –†–µ–∂–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –∫—ç—à–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        logger.log_info(f"Processing single collection: {collection_name}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.collection_manager.initialize()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
            self.session_id = await self.stats_manager.start_session(f"single_{collection_name}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection_stats = await self.collection_manager.process_collection(collection_name, resume_mode)
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = {
                'total_collections': 1,
                'completed_collections': 1 if collection_stats['processed_urls'] > 0 else 0,
                'total_urls': collection_stats['total_urls'],
                'processed_urls': collection_stats['processed_urls'],
                'successful_parses': collection_stats['successful_parses'],
                'failed_parses': collection_stats['failed_parses'],
                'total_duration': collection_stats['duration']
            }
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.stats_manager.end_session(final_stats)
            
            logger.log_info(f"‚úÖ Collection {collection_name} processed successfully!")
            logger.display_final_stats(final_stats)
            
            return True
            
        except Exception as e:
            logger.log_error(f"Failed to process collection {collection_name}: {e}")
            return False
        finally:
            await self.collection_manager.cleanup()
    
    async def run_full_parsing(self, resume_mode: bool = True) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        
        Args:
            resume_mode: –†–µ–∂–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –∫—ç—à–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        logger.log_info("Starting full parsing of all collections...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.collection_manager.initialize()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
            self.session_id = await self.stats_manager.start_session()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            final_stats = await self.collection_manager.process_all_collections(resume_mode)
            
            if not self.running:
                logger.log_info("Parsing interrupted by user")
                return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.stats_manager.end_session(final_stats)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
            await self.run_stats_generation()
            
            logger.log_info("üéâ Full parsing completed successfully!")
            return True
            
        except Exception as e:
            logger.log_error(f"Failed to complete full parsing: {e}")
            return False
        finally:
            await self.collection_manager.cleanup()

# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å Click
@click.command()
@click.option('--resume/--full', default=True, 
              help='Resume from cache (default) or full reprocessing')
@click.option('--collection', type=str, default=None,
              help='Process only specific collection')
@click.option('--stats-only', is_flag=True, default=False,
              help='Generate statistics only (no parsing)')
@click.option('--health-check', is_flag=True, default=False,
              help='Run health check only')
@click.option('--config-test', is_flag=True, default=False,
              help='Test configuration and exit')
def main(resume, collection, stats_only, health_check, config_test):
    """
    Telegram Collectible Gifts Parser
    
    –ü–∞—Ä—Å–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏,
    –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    
    # –ë–∞–Ω–Ω–µ—Ä
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                               ‚ïë
    ‚ïë           üéÅ TELEGRAM COLLECTIBLE GIFTS PARSER üéÅ            ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïë                          v1.0                                ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config_test:
        logger.log_info("Configuration test:")
        logger.log_info(f"Materials dir: {config.MATERIALS_DIR}")
        logger.log_info(f"Output dir: {config.OUTPUT_DIR}")
        logger.log_info(f"Max concurrent: {config.MAX_CONCURRENT_REQUESTS}")
        logger.log_info(f"Batch size: {config.BATCH_SIZE}")
        logger.log_info("‚úÖ Configuration OK")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = TelegramGiftsParser()
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    async def run_async():
        try:
            if health_check:
                success = await parser.run_health_check()
                sys.exit(0 if success else 1)
                
            elif stats_only:
                success = await parser.run_stats_generation()
                sys.exit(0 if success else 1)
                
            elif collection:
                success = await parser.run_single_collection(collection, resume)
                sys.exit(0 if success else 1)
                
            else:
                success = await parser.run_full_parsing(resume)
                sys.exit(0 if success else 1)
                
        except KeyboardInterrupt:
            logger.log_info("Interrupted by user")
            sys.exit(1)
        except Exception as e:
            logger.log_error(f"Unexpected error: {e}")
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    asyncio.run(run_async())

if __name__ == "__main__":
    main()