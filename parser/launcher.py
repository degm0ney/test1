#!/usr/bin/env python3
"""
Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π launcher –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –∏–∑ PyCharm –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import sys
import subprocess
import os
from pathlib import Path
import argparse

def run_command(cmd_args):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ subprocess"""
    try:
        result = subprocess.run(cmd_args, capture_output=True, text=True, encoding='utf-8')
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(result.stderr, file=sys.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    if not run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"]):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ pip")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    req_file = Path(__file__).parent / "requirements.txt"
    if not run_command([sys.executable, "-m", "pip", "install", "-r", str(req_file)]):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    materials_dir = Path(__file__).parent.parent / "materials"
    file_list = materials_dir / "file_list.txt"
    
    if not file_list.exists():
        print("‚ùå –û—à–∏–±–∫–∞: file_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ materials –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    lightsword_file = materials_dir / "lightsword.txt"
    if not lightsword_file.exists():
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ materials –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    output_dir = Path(__file__).parent.parent / "output"
    dirs_to_create = [
        output_dir,
        output_dir / "collections",
        output_dir / "logs", 
        output_dir / "stats",
        output_dir / "cache"
    ]
    
    for directory in dirs_to_create:
        directory.mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    return True

def run_health_check():
    """–ó–∞–ø—É—Å–∫ health check"""
    print("üè• –ó–∞–ø—É—Å–∫ health check...")
    return run_command([sys.executable, "main.py", "--health-check"])

def run_parsing(mode="resume", collection=None):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if collection:
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection}")
        args = [sys.executable, "main.py", "--collection", collection, "--resume"]
    else:
        mode_text = "resume" if mode == "resume" else "–ø–æ–ª–Ω—ã–π (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)"
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ä–µ–∂–∏–º–µ: {mode_text}")
        flag = "--resume" if mode == "resume" else "--full"
        args = [sys.executable, "main.py", flag]
    
    return run_command(args)

def run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥–∞...")
    return run_command([sys.executable, "demo.py"])

def run_stats():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    return run_command([sys.executable, "main.py", "--stats-only"])

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è launcher'–∞"""
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    os.chdir(Path(__file__).parent)
    
    parser = argparse.ArgumentParser(
        description="Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π launcher –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python launcher.py setup                    # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  python launcher.py demo                     # –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
  python launcher.py start                    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
  python launcher.py start --full             # –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
  python launcher.py collection lightsword    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ lightsword
  python launcher.py stats                    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã
  python launcher.py install                  # –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
    )
    
    parser.add_argument('command', choices=[
        'setup', 'install', 'check', 'health-check', 
        'start', 'demo', 'stats', 'collection'
    ], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('--full', action='store_true', 
                       help='–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)')
    
    parser.add_argument('collection_name', nargs='?', 
                       help='–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    # –ë–∞–Ω–µ—Ä
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                               ‚ïë
    ‚ïë           üéÅ TELEGRAM COLLECTIBLE GIFTS PARSER üéÅ            ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïë                    Windows Launcher v1.0                     ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    args = parser.parse_args()
    success = True
    
    try:
        if args.command == 'setup':
            success = (create_directories() and 
                      install_dependencies() and 
                      check_environment() and 
                      run_health_check())
            if success:
                print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python launcher.py start")
                print("–î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python launcher.py demo")
        
        elif args.command == 'install':
            success = install_dependencies()
        
        elif args.command == 'check':
            success = check_environment()
        
        elif args.command == 'health-check':
            success = run_health_check()
        
        elif args.command == 'start':
            mode = "full" if args.full else "resume"
            success = run_parsing(mode)
        
        elif args.command == 'demo':
            success = run_demo()
        
        elif args.command == 'stats':
            success = run_stats()
        
        elif args.command == 'collection':
            if not args.collection_name:
                print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python launcher.py collection <–∏–º—è_–∫–æ–ª–ª–µ–∫—Ü–∏–∏>")
                success = False
            else:
                success = run_parsing("resume", args.collection_name)
    
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        success = False
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        success = False
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()